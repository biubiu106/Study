***********《朱有鹏老师嵌入式linux核心课程》 ***********
《5.linux驱动开发-第1部分-5.1.驱动应该怎么学》

--------------------------------------------------------
本课程由朱老师物联网大讲堂推出并提供技术支持，课件可打包下载
网盘地址：http://yunpan.cn/cjVy3RAgfDufK 访问密码 4ad7
技术交流QQ群：朱老师物联网讲堂1群 397164505
--------------------------------------------------------

第一部分、章节目录
5.1.1.什么是驱动1
5.1.2.什么是驱动2
5.1.3.模块化设计
5.1.4.linux设备驱动分类
5.1.5.驱动程序的安全性要求
5.1.6.驱动应该这么学


第二部分、章节介绍
5.1.1.什么是驱动1
	本节首先讲解驱动部分整个课程规划，然后讲述第1个课程的整体规划。
5.1.2.什么是驱动2
	本节从4个层面解释驱动的本质含义，然后详细介绍了linux内核驱动在整个分层框架中的位置。
5.1.3.模块化设计
	本节首先讲解微内核和宏内核的概念，然后讲解linux内核的静态和动态模块化设计。
5.1.4.linux设备驱动分类
	本节讲述linux内核中三种主要驱动类型的特点和差异，其中重点讲述的是字符设备驱动特征及其与块设备驱动的差异。
5.1.5.驱动程序的安全性要求
	本节讲述驱动程序和内核的关联，从而说明驱动程序对安全性的特殊要求
5.1.6.驱动应该这么学
	本节讲述本阶段驱动课程学习的先决条件和本阶段课程学习时的注意事项。
	


第三部分、随堂记录	
5.1.1_2.什么是驱动1_2
5.1.1.1、理解驱动的概念
(1)驱动一词的字面意思
(2)物理上的驱动
(3)硬件中的驱动
(4)linux内核驱动。软件层面的驱动广义上就是指：这一段代码操作了硬件去动，所以这一段代码就叫硬件的驱动程序。（本质上是电力提供了动力，而驱动程序提供了操作逻辑方法）
狭义上驱动程序就是专指操作系统中用来操控硬件的逻辑方法部分代码。
5.1.1.2、linux体系架构
(1)分层思想
(2)驱动的上面是系统调用API
(3)驱动的下面是硬件
(4)驱动自己本身也是分层的


5.1.3.模块化设计
5.1.3.1、微内核和宏内核
(1)宏内核（又称为单内核）：将内核从整体上作为一个大过程实现，并同时运行在一个单独的地址空间。所有的内核服务都在一个地址空间运行，相互之间直接调用函数，简单高效。
(2)微内核：功能被划分成独立的过程，过程间通过IPC进行通信。模块化程度高，一个服务失效不会影响另外一个服务。典型如windows
(3)linux：本质上是宏内核，但是又吸收了微内核的模块化特性，提现在2个层面
5.1.3.2、静态模块化：在编译时实现可裁剪，特征是想要功能裁剪改变必须重新编译
5.1.3.3、动态模块化：zImage可以不重新编译烧录，甚至可以不关机重启就实现模块的安装和卸载。


5.1.4.linux设备驱动分类
5.1.4.1、驱动分类
(1)分3类：字符设备驱动、块设备驱动、网络设备驱动
(2)分类原则：设备本身读写操作的特征差异
5.1.4.2、三类驱动程序详细对比分析
(1)字符设备，准确的说应该叫“字节设备”，软件操作设备时是以字节为单位进行的。典型的如LCD、串口、LED、蜂鸣器、触摸屏······
(2)块设备，块设备是相对于字符设备定义的，块设备被软件操作时是以块（多个字节构成的一个单位）为单位的。设备的块大小是设备本身设计时定义好的，软件是不能去更改的，不同设备的块大小可以不一样。常见的块设备都是存储类设备，如：硬盘、NandFlash、iNand、SD····
(3)网络设备，网络设备是专为网卡设计的驱动模型，linux中网络设备驱动主要目的是为了支持API中socket相关的那些函数工作。
5.1.4.3、为什么字符设备驱动最重要
(1)常见大量设备都属于字符设备
(2)举例说明非标准类型字符设备驱动


5.1.5.驱动程序的安全性要求
5.1.5.1、驱动是内核的一部分
(1)驱动已经成为内核中最庞大的组成部分
(2)内核会直接以函数调用的方式调用驱动代码
(3)驱动的动态安装和卸载都会“更改”内核
5.1.5.2、驱动对内核的影响
(1)驱动程序崩溃甚至会导致内核崩溃
(2)驱动的效率会影响内核的整体效率
(3)驱动的漏洞会造成内核安全漏洞
5.1.5.3、常见驱动安全性问题
(1)未初始化指针
(2)恶意用户程序
(3)缓冲区溢出
(4)竞争状态


5.1.6.驱动应该这么学
5.1.6.1、先学好C语言
5.1.6.2、掌握相关预备知识
(1)硬件操作方面
(2)应用层API
5.1.6.3、驱动学习阶段
(1)注重实践，一步一步写驱动
(2)框架思维，多考虑整体和上下层
(3)先通过简单设备学linux驱动框架
(4)学会总结、记录，这会有助于理解


